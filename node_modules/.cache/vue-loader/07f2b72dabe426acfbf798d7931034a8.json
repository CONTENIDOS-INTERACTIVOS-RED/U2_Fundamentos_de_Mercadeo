{"remainingRequest":"/home/runner/work/U2_Fundamentos_de_Mercadeo/U2_Fundamentos_de_Mercadeo/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Fundamentos_de_Mercadeo/U2_Fundamentos_de_Mercadeo/src/views/curso/Tema1.vue?vue&type=template&id=2a8dc20c&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Fundamentos_de_Mercadeo/U2_Fundamentos_de_Mercadeo/src/views/curso/Tema1.vue","mtime":1736763597367},{"path":"/home/runner/work/U2_Fundamentos_de_Mercadeo/U2_Fundamentos_de_Mercadeo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_de_Mercadeo/U2_Fundamentos_de_Mercadeo/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_de_Mercadeo/U2_Fundamentos_de_Mercadeo/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_de_Mercadeo/U2_Fundamentos_de_Mercadeo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_de_Mercadeo/U2_Fundamentos_de_Mercadeo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}